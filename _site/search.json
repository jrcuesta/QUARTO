[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "José Ramón Cuesta",
    "section": "",
    "text": "This is the personal blog of José Ramón Cuesta about the use of chemometric tools available in R to study the Near Infrared spectroscopy and develop models with the spectra and reference values."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NIR-CHEMOMETRICS",
    "section": "",
    "text": "NIT Tutorial\n\n\n\n\nAlong the coming post we will several math treatments trying to improve the correlation between the predictors and the outcomes. In this one SNV\n\n\n\n\n\n\nOct 3, 2022\n\n\nJosé Ramón Cuesta\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nNIT Tutorial\n\n\n\n\nLet´s check the correlation between the outcomes, between the predictors and between outcomes and predictors\n\n\n\n\n\n\nSep 29, 2022\n\n\nJosé Ramón Cuesta\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nNIT Tutorial\n\n\n\n\nLet use tidyverse to see the spectra and histograms\n\n\n\n\n\n\nSep 28, 2022\n\n\nJosé Ramón Cuesta\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNIT tutorial\n\n\n\n\nPlot the near infrared transmitance spectra of meat samples and have a look to the histograms of the main parameters using classic R code\n\n\n\n\n\n\nSep 26, 2022\n\n\nJosé Ramón Cuesta\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nSep 23, 2022\n\n\nJosé Ramón Cuesta\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Near Infrared Transmitance Tutorial (part 1)/index.html",
    "href": "posts/Near Infrared Transmitance Tutorial (part 1)/index.html",
    "title": "Near Infrared Transmitance (part 1)",
    "section": "",
    "text": "library(caret)\n?tecator\n\nWhen loading tecator, we have two data tables: “absorp” and “endpoints” with the spectra and reference values for the parameters “water”, “fat” and “protein” for the 215 meat samples.\n\ndata(tecator)\nls()\n\n[1] \"absorp\"    \"endpoints\"\n\n\nThe spectra data is in the “absorp” table which is a matrix of 215 rows (number of samples) ,and 100 columns (number of wavelengths ), so we can give names to the columns of “absorp” matrix.\n\ncolnames(absorp) <- seq(850, 1048, by = 2)\n\nWe can have a look to the spectra and see its appearance:\n\nmatplot(colnames(absorp), t(absorp), type = \"l\", ylab = \"Absorbance\", xlab = \"wavelength (nm)\", main = \"Raw meat spectra\")\n\n\n\n\nWe can see the differences in absorbance for every spectra due to the scatter, differences in the pathlength and other physical reasons. This is something we have to work on to remove it and try to see as better as possibles the chemical changes due to the differences in moisture, fat and protein, which are the parameter we want to build models.\nThe “endpoints” table has the reference values for the parameters of interest (Moisture, Fat and Protein). It is important to have a look to the parameters distribution, so we can use for this the histogram, but first lets give names to the parameters matrix.\n\ncolnames(endpoints)\n\nNULL\n\ncolnames(endpoints) <- c(\"Moisture\", \"Fat\", \"Protein\")\nhistogram(endpoints[ , 1], xlab = \"Moisture content\", main =\"Histogram Moisture\", col = \"blue\")\n\n\n\nhistogram(endpoints[ , 2], xlab = \"Fat content\", main =\"Histogram Fat\", col = \"grey\")\n\n\n\nhistogram(endpoints[ , 3], xlab = \"Protein content\", main =\"Histogram Protein\", col = \"red\")\n\n\n\n\nWe can create a data frame called “tecator” with the “endpoints” and “absorp” matrices\n\ntecator <- data.frame(endpoints)\ntecator$spec <- absorp\n\nNow let´s save the dataframe to use in another post:\n\nsave.image(\"C:/BLOG/Workspaces/NIT Tutorial/NIT_ws1.RData\")"
  },
  {
    "objectID": "posts/Near Infrared Transmitance Tutorial (part 2)/index.html",
    "href": "posts/Near Infrared Transmitance Tutorial (part 2)/index.html",
    "title": "Near Infrared Transmitance Tutorial (part 2)",
    "section": "",
    "text": "library(tidyverse)\nlibrary(modeldata)\nload(\"C:/BLOG/Workspaces/NIT Tutorial/NIT_ws1.RData\")\nls()\n\n[1] \"absorp\"    \"endpoints\" \"tecator\"  \n\n\nNow we can create another field called “SampleID” as a sequence from 1 to 215 (number of samples), it will be very usefull whenever we use the tecator dataframe:\n\ntecator <- tecator %>%   \n  rowid_to_column(var = \"SampleID\") \n\nThe tecator data is available as well in the library “modeldata”, but with the name “meats”, so we can load it into the workspace and work with it using the tidyverse and tidymodels libraries. The idea of this tutorial is getting use to work with tidyverse and tidymodels at the same time that with classic R.\n\ndata(meats)\n?meats\n\nThe first 100 columns are the wavelengths are the datapoints and the last 3 the parameters, so we can rename de column names, and add an extra column called “SampleID” (same as row number).\n\ncolnames(meats) <- c(seq(850, 1048, by = 2), \"Moisture\", \"Fat\", \"Protein\")\n\nmeats <- \n  meats  %>% \n  rowid_to_column(var = \"SampleID\")\n\nNow we can see the histograms with ggplot\n\nmeats %>% \n  ggplot(aes(Protein)) +\n  geom_histogram(bins = 20) +\n  ggtitle(\"Protein Meat histogram\")\n\n\n\n\nWe can do the same for moisture and fat, but with some code we can see all the histograms at the same time:\n\nmeats %>% \n  select(SampleID, Moisture, Fat, Protein) %>% \n  pivot_longer(cols = Moisture:Protein,\n               names_to = \"Parameter\",\n               values_to = \"Value\") %>% \n  mutate(Parameter = as.factor(Parameter)) %>% \n  ggplot(aes(Value)) +\n  geom_histogram() +\n  facet_wrap(~ Parameter, scales = \"free_x\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nIn order to see the spectra with ggplot we pivot longer meats data grouping by SampleID:\n\nmeats_longer <- \n  meats  %>% \n  pivot_longer(cols = c(2:101),\n               names_to = \"wavelength\",\n               values_to = \"absorbance\")  %>%  \n  mutate(wavelength = as.integer(str_extract(wavelength, \"[:digit:]+\")))\n\nmeats_longer  %>% \n  ggplot(aes(x = wavelength, y = absorbance, group = SampleID)) + \n  geom_line(alpha = 0.5) + \n  theme_light()\n\n\n\n\nSave the workspace for future use\n\nsave.image(\"C:/BLOG/Workspaces/NIT Tutorial/NIT_ws2.RData\")"
  },
  {
    "objectID": "posts/Near Infrared Transmitance Tutorial (part 3)/index.html",
    "href": "posts/Near Infrared Transmitance Tutorial (part 3)/index.html",
    "title": "Near Infrared Transmitance Tutorial (part 3)",
    "section": "",
    "text": "library(tidyverse)\nlibrary(corrplot)\nload(\"C:/BLOG/Workspaces/NIT Tutorial/NIT_ws2.RData\")\nls()\n\n[1] \"absorp\"       \"endpoints\"    \"meats\"        \"meats_longer\" \"tecator\"     \n\n\nIt is important to check the correlation between the outcomes variables (Moisture, Fat and Protein in this case). As we remember the outcomes are in the “endpoints” matrix.\n\nendpoints %>% \n  cor()\n\n           Moisture        Fat    Protein\nMoisture  1.0000000 -0.9881002  0.8145212\nFat      -0.9881002  1.0000000 -0.8608965\nProtein   0.8145212 -0.8608965  1.0000000\n\n\nThe correlation matrix show how the are high correlations between the three parameters, but we can use graphics to see it more clearly:\n\ncorrplot(cor(endpoints), method = \"ellipse\")\n\n\n\n\nBut to check better the trends and the possible outliers, we can use the function “pairs\n\npairs(endpoints)\n\n\n\n\nThis way we can see at least six outliers that seems to have some bias versus the linear trend. What are the reason for these outliers? (samples different from the rest, different reference method, bias in the reference method,…). We will try to see along the tutorial.\nIt is known that the NIR or NIT predictor variables are highly correlated, due that we are working with overtones and combination bands, so the correlation matrix in this case show high correlation between all the variables, due to we are in the third overtone and working with very broad bands.For this reason we have to apply math treatments to the spectra to remove the scatter effect and derivatives to improve the resolution of the bands. The correlation between predictors is a long matrix (100.100), so the best way to see it it is graphically. By now we see the correlation matrix of the raw spectra (without any math treatment)\n\ncorrplot(cor(absorp), method = \"circle\", type = \"upper\", tl.cex = 0.5)\n\n\n\n\nAnother point is how the variation in the predictors matrix correlates with the variation of the outcomes. What we do is to see which wavelengths correlate better with a certain parameter getting three correlation spectra (one for every parameter).\n\ncor_rawspec_moi <- cor(tecator$Moisture, tecator$spec)\ncor_rawspec_fat <- cor(tecator$Fat, tecator$spec)\ncor_rawspec_prot <- cor(tecator$Protein, tecator$spec)\n\ncor_rawspec <- as.data.frame(rbind(cor_rawspec_moi, cor_rawspec_fat, cor_rawspec_prot))\ncor_rawspec <- cor_rawspec %>% \n  mutate(Parameter = as.factor(c(\"Moisture\", \"Fat\", \"Protein\")))\n\ncor_rawspec %>% \n  pivot_longer(cols = c(1:100), names_to = \"Wavelength\", values_to = \"Correlation\") %>% \n  mutate(Wavelength = as.integer(Wavelength)) %>% \n  ggplot(aes(x = Wavelength, y = Correlation, group = Parameter, col = Parameter)) +\n  geom_line()\n\n\n\n\nAs we can see there are no wavelengths with high correlations, and if we would auto-scale every correlation spectrum, the spectrum would seem as a meat sample spectra (for moisture and protein inverted). All this is due to the scatter physical effects. So, with some math treatments to remove it the correlation will improve. Anyway, in the third overtone due to the bands overlapping, we would need a multivariate calibration with all or almost all the wavelengths.\nAs always save the workspace for future use:\n\nsave.image(\"C:/BLOG/Workspaces/NIT Tutorial/NIT_ws3.RData\")"
  },
  {
    "objectID": "posts/Near Infrared TransmitanceTutorial (part 4)/index.html",
    "href": "posts/Near Infrared TransmitanceTutorial (part 4)/index.html",
    "title": "Near Infrared Transmitance Tutorial (part 4)",
    "section": "",
    "text": "load(\"C:/BLOG/Workspaces/NIT Tutorial/NIT_ws3.RData\")\nls()\n\n[1] \"absorp\"           \"cor_rawspec\"      \"cor_rawspec_fat\"  \"cor_rawspec_moi\" \n[5] \"cor_rawspec_prot\" \"endpoints\"        \"meats\"            \"meats_longer\"    \n[9] \"tecator\"         \n\n\nWe can remove some objects we don´t need\n\nrm(\"cor_rawspec_fat\", \"cor_rawspec_moi\", \"cor_rawspec_prot\")\n\nNow we load the libraries we will use:\n\nlibrary(tidyverse)\n\nThe idea now is to apply some math treatments to the raw spectra and check which one improves the correlation with the parameters of interest. Normally there are some common scatter removal algorithms that I use:\n\nStandard Normal Variate (SNV)\nDetrend (linear or quadratic)\nSNV + Detrend (linear or quadratic)\nMultiple Scatter Correction\n\nThere are some packages in R which have these math treatment with this name or a similar one, or we can create functions to apply these algorithms to the spectra matrix.\nLet´s start using SNV, where we center every spectrum (subtracting the mean) and scale it (dividing by the standard deviation):\n\n#The algorithm is applied to the columns, so we transpose the matrix\nabsorp_snv <- scale(t(absorp), center = TRUE, scale = TRUE)\n#Let´s convert the corrected matrix as usual\nabsorp_snv <- t(absorp_snv)\n\nmatplot(colnames(absorp_snv), t(absorp_snv), type = \"l\", xlab = \"Wavelength (nm)\", ylab = \"Absorbance\", main = \"SNV Meat Spectra\")\n\n\n\n\nWe can add the matrix treated with the SNV math treatment to the tecator dataframe\n\ntecator$snv_spec <- absorp_snv\n\nNow we can see if the correlation is improved\n\ncor_snvspec_moi <- cor(tecator$Moisture, tecator$snv_spec)\ncor_snvspec_fat <- cor(tecator$Fat, tecator$snv_spec)\ncor_snvspec_prot <- cor(tecator$Protein, tecator$snv_spec)\n\ncor_snvspec <- as.data.frame(rbind(cor_snvspec_moi, cor_snvspec_fat, cor_snvspec_prot))\n\ncor_snvspec <- cor_snvspec %>% \n  mutate(Parameter = as.factor(c(\"Moisture\", \"Fat\", \"Protein\")))\n\ncor_snvspec %>% \n  pivot_longer(cols = c(1:100), names_to = \"Wavelength\", values_to = \"Correlation\") %>% \n  mutate(Wavelength = as.integer(Wavelength)) %>% \n  ggplot(aes(x = Wavelength, y = Correlation, group = Parameter, col = Parameter)) +\n  geom_line()\n\n\n\n\nNow, apart from the better correlation we can see an improvement in the definition of the correlations (positives and negatives), and the correlation spectra confirm what we have seen in the correlation between the parameters."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "I am using Quarto to develop a new blog about the use of R and its chemometric tools applyed to the Near Infared spectroscopy. Hope you enjoyed the coming posts in the future."
  }
]